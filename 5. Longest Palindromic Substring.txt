class Solution {
    public String longestPalindrome(String s) {
        
        int start = 0;
        int last = s.length() - 1;
        String longestPalindrome = "";

        if(s.length() == 1){
            return s;
        }

        if(s.length() == 2 && !Character.toString(s.charAt(0)).equals(Character.toString(s.charAt(1)))){

            return Character.toString(s.charAt(0));
        }

        while(start < last){

            while(start < last){
                Boolean isPlalindrome = checkPalindrome(s.substring(start, last + 1));
                if(isPlalindrome == true){
                    if(longestPalindrome.length() < last - start + 1){
                        longestPalindrome = s.substring(start, last + 1);
                    }
                    // return s.substring(start, last + 1);
                }
                last = last - 1;
            }
            start = start + 1;
            last = s.length() - 1;
        }

        if(longestPalindrome.trim().equals("")){
            return s.substring(0, 1);
        }

        return longestPalindrome;
    }

    public Boolean checkPalindrome(String a){

        int i = 0;
        int j = a.length() - 1;

        while(i < j){
            if(a.charAt(i) != a.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}